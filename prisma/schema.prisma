// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * tabla test de prueba
 */
model TestUser {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

/**
 * usuarios y roles
 */
model User {
  id                  Int        @id @default(autoincrement())
  username            String
  password_hash       String
  email               String     @unique
  nombre              String
  apellido            String
  telefono            String?
  estado              EstadoUser @default(ACTIVO)
  fecha_creacion      DateTime   @default(now())
  fecha_actualizacion DateTime   @updatedAt

  // relaciones
  UserRole      UserRole[]
  Doctor        Doctor[]
  refreshTokens RefreshToken[]
}

model Role {
  id                  Int      @id @default(autoincrement())
  nombre              String   @unique
  descripcion         String
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  UserRole UserRole[]
}

model UserRole {
  id           Int      @id @default(autoincrement())
  asignado_en  DateTime @default(now())
  asignado_por String?
  activo       Boolean  @default(true)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId Int

  @@unique([userId, roleId])
}

enum EstadoUser {
  ACTIVO
  INACTIVO
}

/**
 * pacientes
 */
model Paciente {
  id                  Int               @id @default(autoincrement())
  numero_documento    String            @unique
  tipo_documento      EnumTipoDocumento @default(DNI)
  nombre              String
  apellido_paterno    String
  apellido_materno    String
  fecha_nacimiento    DateTime
  genero              EnumGenero        @default(OTRO)
  telefono            String
  email               String
  direccion           String
  estado_civil        EnumEstadocivil
  ocupacion           String
  fecha_creacion      DateTime          @default(now())
  fecha_actualizacion DateTime          @updatedAt

  ContactoPaciente   ContactoPaciente[]
  DireccionPaciente  DireccionPaciente[]
  hallazgos_paciente HallazgosPaciente[]
  planes_tratamiento PlanTratamiento[]
  registros_clinicos RegistroClinico[]
  citas              Cita[]
}

model ContactoPaciente {
  id         Int      @id @default(autoincrement())
  paciente   Paciente @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pacienteId Int
  nombre     String
  telefono   String
  relacion   String

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt
}

model DireccionPaciente {
  id         Int      @id @default(autoincrement())
  paciente   Paciente @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pacienteId Int

  calle        String
  referencia   String
  departamento String
  distrito     String
  provincia    String
  pais         String
  nro_exterior String

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt
}

/**
 * doctores
 */
model Doctor {
  id                  Int               @id @default(autoincrement())
  user_id             Int               @unique
  numero_documento    String            @unique
  tipo_documento      EnumTipoDocumento @default(DNI)
  nombre              String
  apellido_paterno    String
  apellido_materno    String
  telefono            String
  email               String            @unique
  especialidad        String
  estado              EstadoDoctor      @default(ACTIVO)
  fecha_creacion      DateTime          @default(now())
  fecha_actualizacion DateTime          @updatedAt

  hallazgos_paciente HallazgosPaciente[]
  tratamientos       Tratamiento[]
  registros_clinicos RegistroClinico[]
  citas              Cita[]

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum EstadoDoctor {
  ACTIVO
  INACTIVO
}

/**
 * Dientes
 */
model Diente {
  id            Int            @id @default(autoincrement())
  numero_diente String         @unique
  nombre_diente String
  descripcion   String?
  edad_diente   String?
  tipo_diente   EnumTipoDiente

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  ConfiguracionDiente ConfiguracionDiente[]
  hallazgos_paciente  HallazgosPaciente[]
}

model ConfiguracionSuperficie {
  id          Int            @id @default(autoincrement())
  tipo_diente EnumTipoDiente @unique
  filas       Int            @default(3)
  columnas    Int            @default(3)
  descripcion String

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  SuperficieDental    SuperficieDental[]
  ConfiguracionDiente ConfiguracionDiente[]
}

model SuperficieDental {
  id                        Int               @id @default(autoincrement())
  configuracionSuperficieId Int
  fila                      Int
  columna                   Int
  codigo                    String
  cara_anatomica            EnumCaraAnatomica
  ubicacion_especifica      String?
  es_activa                 Boolean           @default(true)
  descripcion               String

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  configuracion_superficie ConfiguracionSuperficie @relation(fields: [configuracionSuperficieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hallazgos_paciente       HallazgosPaciente[]
}

model ConfiguracionDiente {
  id                        Int @id @default(autoincrement())
  dienteId                  Int
  configuracionSuperficieId Int

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  diente                   Diente                  @relation(fields: [dienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  configuracion_superficie ConfiguracionSuperficie @relation(fields: [configuracionSuperficieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([dienteId, configuracionSuperficieId])
}

/**
 * Hallazgos
 */
model Hallazgos {
  id              Int          @id @default(autoincrement())
  nombre_hallazgo String       @db.VarChar(100)
  abreviacion     String?      @db.VarChar(20)
  descripcion     String?      @db.Text
  tipo_hallazgo   TipoHallazgo
  color           String?      @db.VarChar(20)

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  hallazgos_paciente HallazgosPaciente[]
}

model HallazgosPaciente {
  id                   Int     @id @default(autoincrement())
  id_diente            Int
  id_superficie_dental Int?
  id_paciente          Int
  id_doctor            Int
  id_hallazgo          Int
  observaciones        String? @db.Text

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  diente            Diente            @relation(fields: [id_diente], references: [id], onDelete: Restrict, onUpdate: Cascade)
  superficie_dental SuperficieDental? @relation(fields: [id_superficie_dental], references: [id], onDelete: SetNull, onUpdate: Cascade)
  paciente          Paciente          @relation(fields: [id_paciente], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor            Doctor            @relation(fields: [id_doctor], references: [id], onDelete: Restrict, onUpdate: Cascade)
  hallazgo          Hallazgos         @relation(fields: [id_hallazgo], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id_paciente, id_diente], name: "idx_paciente_diente")
  @@index([fecha_creacion], name: "idx_fecha_creacion")
}

/**
 * Tratamientos
 */
model PlanTratamiento {
  id           Int                   @id @default(autoincrement())
  id_paciente  Int?
  fecha_inicio DateTime?             @db.Date
  fecha_fin    DateTime?             @db.Date
  estado       EstadoPlanTratamiento @default(activo)

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  paciente     Paciente?     @relation(fields: [id_paciente], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tratamientos Tratamiento[]
}

model Tratamiento {
  id                  Int               @id @default(autoincrement())
  id_plan_tratamiento Int?
  id_doctor           Int?
  descripcion         String?           @db.Text
  costo               Decimal?          @db.Decimal(10, 2)
  duracion            Int?
  estado              EstadoTratamiento @default(activo)

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  plan_tratamiento PlanTratamiento? @relation(fields: [id_plan_tratamiento], references: [id], onDelete: SetNull, onUpdate: Cascade)
  doctor           Doctor?          @relation(fields: [id_doctor], references: [id], onDelete: SetNull, onUpdate: Cascade)
  pagos            Pago[]
}

model Pago {
  id             Int         @id @default(autoincrement())
  id_tratamiento Int?
  monto          Decimal     @db.Decimal(10, 2)
  metodo_pago    MetodoPago?
  fecha_pago     DateTime    @default(now())
  estado         EstadoPago  @default(pendiente)

  tratamiento Tratamiento? @relation(fields: [id_tratamiento], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/**
 * Historial cl√≠nico
 */
model TipoRegistroClinico {
  id          Int     @id @default(autoincrement())
  nombre_tipo String  @db.VarChar(100)
  descripcion String? @db.Text

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  registros_clinicos RegistroClinico[]
}

model RegistroClinico {
  id               Int      @id @default(autoincrement())
  id_paciente      Int?
  id_doctor        Int?
  id_tipo_registro Int?
  descripcion      String?  @db.Text
  fecha_registro   DateTime @default(now())

  paciente      Paciente?            @relation(fields: [id_paciente], references: [id], onDelete: SetNull, onUpdate: Cascade)
  doctor        Doctor?              @relation(fields: [id_doctor], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tipo_registro TipoRegistroClinico? @relation(fields: [id_tipo_registro], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

/**
 * Citas
 */
model Cita {
  id          Int        @id @default(autoincrement())
  id_paciente Int?
  id_doctor   Int?
  fecha       DateTime
  motivo      String?    @db.Text
  estado      EstadoCita @default(pendiente)

  paciente Paciente? @relation(fields: [id_paciente], references: [id], onDelete: SetNull, onUpdate: Cascade)
  doctor   Doctor?   @relation(fields: [id_doctor], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

/**
 * Enums
 */
enum TipoHallazgo {
  diente
  cara
}

enum EstadoPlanTratamiento {
  activo
  inactivo
}

enum EstadoTratamiento {
  activo
  inactivo
}

enum MetodoPago {
  efectivo
  tarjeta
  transferencia
}

enum EstadoPago {
  pendiente
  pagado
}

enum EstadoCita {
  pendiente
  confirmada
  cancelada
  realizada
}

enum EnumTipoDiente {
  INCISIVO
  CANINO
  PREMOLAR
  MOLAR
}

enum EnumCaraAnatomica {
  VESTIBULAR
  LINGUAL
  MESIAL
  DISTAL
  OCLUSAL
  PALATINA
}

enum EnumTipoDocumento {
  DNI
  CARNETE_EXTRANJERIA
  OTRO
  PASAPORTE
}

enum EnumGenero {
  MASCULINO
  FEMENINO
  OTRO
}

enum EnumEstadocivil {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
